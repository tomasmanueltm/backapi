generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model deposito {
  id         Int      @id @default(autoincrement())
  iban       String?  @db.VarChar(100)
  id_usuario Int?
  referencia String?  @db.VarChar(255)
  valor      String?  @db.VarChar(500)
  usuario    usuario? @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "fk_deposito_usuario")

  @@index([id_usuario], map: "fk_deposito_usuario")
}

model levantamento {
  id         Int      @id @default(autoincrement())
  valor      String?  @db.VarChar(500)
  id_usuario Int?
  usuario    usuario? @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "fk_levantamento_usuario")

  @@index([id_usuario], map: "fk_levantamento_usuario")
}

model times {
  id                       Int     @id @default(autoincrement())
  adversario               String? @db.MediumText
  casa                     String? @db.MediumText
  probabilidade_casa       String? @db.VarChar(255)
  probabilidade_adversario String? @db.VarChar(255)
  empate                   String? @db.VarChar(100)
}

model usuario {
  id           Int                   @id @default(autoincrement())
  nome         String?               @db.VarChar(255)
  iban         String?               @db.VarChar(200)
  pais         String?               @db.VarChar(255)
  moeda_padrao String?               @db.VarChar(255)
  email        String?               @db.VarChar(200)
  telefone     String?               @db.VarChar(100)
  senha        String?               @db.MediumText
  token        String?               @db.MediumText
  codigo_sms   String?               @db.VarChar(100)
  email_token  String?               @db.MediumText
  exp          String?               @db.VarChar(100)
  tipo_usuario usuario_tipo_usuario? @default(Normal)
  aposta       aposta[]
  deposito     deposito[]
  levantamento levantamento[]
  venda        venda[]
  conta_plano  conta_plano[]
  admin        admin[]
}

model aposta {
  id            Int         @id @default(autoincrement())
  id_ficha      Int?
  id_usuario    Int?
  id_referencia Int?
  valor         String?     @db.VarChar(100)
  data          DateTime?   @db.Date
  ficha         ficha?      @relation(fields: [id_ficha], references: [id], onDelete: Cascade, map: "fk_aposta_ficha")
  referencia    referencia? @relation(fields: [id_referencia], references: [id], onDelete: Cascade, map: "fk_aposta_referencia")
  usuario       usuario?    @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "fk_aposta_usuario")

  @@index([id_ficha], map: "fk_aposta_ficha")
  @@index([id_referencia], map: "fk_aposta_referencia")
  @@index([id_usuario], map: "fk_aposta_usuario")
}

model equipes {
  id   Int     @id @default(autoincrement())
  pais String? @db.VarChar(255)
  nome String? @db.VarChar(255)
  logo String? @db.MediumText
}

model evento {
  id      Int            @id @default(autoincrement())
  data    DateTime?      @db.Date
  sport   String?        @db.VarChar(150)
  status  evento_status? @default(Pendente)
  id_jogo Int?
  jogo    jogo?          @relation(fields: [id_jogo], references: [id], onDelete: Cascade, map: "fk_evento_jogo")
  odds    odds[]

  @@index([id_jogo], map: "fk_evento_jogo")
}

model ficha {
  id         Int      @id @default(autoincrement())
  construcao String?  @db.MediumText
  aposta     aposta[]
}

model agente {
  id       Int     @id @default(autoincrement())
  nome     String? @db.MediumText
  endereco String? @db.MediumText
  numero   String? @db.MediumText
  email    String? @db.MediumText
  nivel    String? @db.MediumText
  iban     String? @db.MediumText
  venda    venda[]
}

model plano {
  id          Int           @id @default(autoincrement())
  nome        String?       @db.MediumText
  venda       venda[]
  conta_plano conta_plano[]
}

model venda {
  id         Int      @id @default(autoincrement())
  id_agente  Int
  id_plano   Int
  id_usuario Int
  agente     agente?  @relation(fields: [id_agente], references: [id], onDelete: Cascade, map: "fk_id_agente_venda")
  plano      plano?   @relation(fields: [id_plano], references: [id], onDelete: Cascade, map: "fk_id_plano_venda")
  usuario    usuario? @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "fk_id_usuario_venda")

  @@index([id_agente], map: "fk_id_agente_venda")
  @@index([id_plano], map: "fk_id_plano_venda")
  @@index([id_usuario], map: "fk_id_usuario_venda")
}

model jogo {
  id          Int      @id @default(autoincrement())
  casa        String?  @db.VarChar(100)
  casa_logo   String?  @db.MediumText
  visita      String?  @db.VarChar(100)
  visita_logo String?  @db.MediumText
  evento      evento[]
}

<<<<<<< HEAD
model conta_plano {
  id         Int     @id @default(autoincrement())
  id_usuario Int
  id_plano   Int
  saldo      String? @db.MediumText
  bonus      String? @db.MediumText
  plano      plano?  @relation(fields: [id_plano], references: [id], onDelete: Cascade, map: "fk_id_plano_conta_plano")

  usuario usuario? @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "fk_id_usuario_conta_plano")

  @@index([id_usuario], map: "fk_id_usuario_conta_plano")
  @@index([id_plano], map: "fk_id_plano_conta_plano")
}

model admin {
  id         Int     @id @default(autoincrement())
  id_usuario Int
  nome       String? @db.MediumText
  nivel      String? @db.MediumText
  endereco   String? @db.MediumText
  telefone   String? @db.VarChar(20)

  usuario usuario? @relation(fields: [id_usuario], references: [id], onDelete: Cascade, map: "fk_id_usuario_admin")

  @@index([id_usuario], map: "fk_id_usuario_admin")
=======
model agente {
  id          Int      @id @default(autoincrement())
  nome        String  @db.VarChar(100)
  email   String  @db.MediumText
  data_nasc      String  @db.VarChar(100)
  pais       String  @db.VarChar(100)
  moeda       String  @db.VarChar(100)
  telefone       String?  @db.VarChar(100)
  endereco       String?  @db.VarChar(100)
  file_original_name String?  @db.VarChar(100)
  file_name String?  @db.VarChar(100)
>>>>>>> main
}

model odds {
  id        Int     @id @default(autoincrement())
  id_evento Int?
  odds      String? @db.VarChar(500)
  evento    evento? @relation(fields: [id_evento], references: [id], onDelete: Cascade, map: "fk_odds_evento")

  @@index([id_evento], map: "fk_odds_evento")
}

model referencia {
  id     Int                @id @default(autoincrement())
  codigo String?            @db.VarChar(200)
  status referencia_status? @default(Pendente)
  aposta aposta[]
}

enum referencia_status {
  Pendente
  Ativado
  Desativado
}

enum evento_status {
  Pendente
  Ativado
  Desativado
}

enum usuario_tipo_usuario {
  Admin
  Normal
  Agente
}
